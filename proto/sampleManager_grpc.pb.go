// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/sampleManager.proto

package go_sampleManager_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SampleManagerServiceClient is the client API for SampleManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleManagerServiceClient interface {
	AddSampleMapping(ctx context.Context, in *SampleMapping, opts ...grpc.CallOption) (*AddSampleMappingResponse, error)
	FetchSampleItemId(ctx context.Context, in *FetchSampleItemIdRequest, opts ...grpc.CallOption) (*FetchSampleItemIdResponse, error)
}

type sampleManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleManagerServiceClient(cc grpc.ClientConnInterface) SampleManagerServiceClient {
	return &sampleManagerServiceClient{cc}
}

func (c *sampleManagerServiceClient) AddSampleMapping(ctx context.Context, in *SampleMapping, opts ...grpc.CallOption) (*AddSampleMappingResponse, error) {
	out := new(AddSampleMappingResponse)
	err := c.cc.Invoke(ctx, "/proto.SampleManagerService/AddSampleMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleManagerServiceClient) FetchSampleItemId(ctx context.Context, in *FetchSampleItemIdRequest, opts ...grpc.CallOption) (*FetchSampleItemIdResponse, error) {
	out := new(FetchSampleItemIdResponse)
	err := c.cc.Invoke(ctx, "/proto.SampleManagerService/FetchSampleItemId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleManagerServiceServer is the server API for SampleManagerService service.
// All implementations must embed UnimplementedSampleManagerServiceServer
// for forward compatibility
type SampleManagerServiceServer interface {
	AddSampleMapping(context.Context, *SampleMapping) (*AddSampleMappingResponse, error)
	FetchSampleItemId(context.Context, *FetchSampleItemIdRequest) (*FetchSampleItemIdResponse, error)
	mustEmbedUnimplementedSampleManagerServiceServer()
}

// UnimplementedSampleManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSampleManagerServiceServer struct {
}

func (UnimplementedSampleManagerServiceServer) AddSampleMapping(context.Context, *SampleMapping) (*AddSampleMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSampleMapping not implemented")
}
func (UnimplementedSampleManagerServiceServer) FetchSampleItemId(context.Context, *FetchSampleItemIdRequest) (*FetchSampleItemIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSampleItemId not implemented")
}
func (UnimplementedSampleManagerServiceServer) mustEmbedUnimplementedSampleManagerServiceServer() {}

// UnsafeSampleManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleManagerServiceServer will
// result in compilation errors.
type UnsafeSampleManagerServiceServer interface {
	mustEmbedUnimplementedSampleManagerServiceServer()
}

func RegisterSampleManagerServiceServer(s grpc.ServiceRegistrar, srv SampleManagerServiceServer) {
	s.RegisterService(&SampleManagerService_ServiceDesc, srv)
}

func _SampleManagerService_AddSampleMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleMapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleManagerServiceServer).AddSampleMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SampleManagerService/AddSampleMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleManagerServiceServer).AddSampleMapping(ctx, req.(*SampleMapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleManagerService_FetchSampleItemId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSampleItemIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleManagerServiceServer).FetchSampleItemId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SampleManagerService/FetchSampleItemId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleManagerServiceServer).FetchSampleItemId(ctx, req.(*FetchSampleItemIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleManagerService_ServiceDesc is the grpc.ServiceDesc for SampleManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SampleManagerService",
	HandlerType: (*SampleManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSampleMapping",
			Handler:    _SampleManagerService_AddSampleMapping_Handler,
		},
		{
			MethodName: "FetchSampleItemId",
			Handler:    _SampleManagerService_FetchSampleItemId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sampleManager.proto",
}
